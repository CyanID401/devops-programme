name: Pipeline
run-name: Action triggered by @${{ github.actor }}

on:
  pull_request:
    branches-ignore:
      - 'main'

jobs:
  editorconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Check if the .editorconfig file exists
        run: |
          [ -f .editorconfig ] && exit 0 || exit 1

      - name: Run the editorconfig checker
        run: editorconfig-checker -verbose -exclude node_modules

  markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repo
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install markdown checker
        run: npm i -g cli-markdown

      - name: Run markdown checker
        run: find . -name '*.md' ! -path '*/node_modules/*' -exec md {} \;


  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: pip install pylint black

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          pylint: true
          pylint_args: --disable=C0114,C0115,C0116,E0401
          black: true

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run the gitleaks
        uses: gitleaks/gitleaks-action@v2
  
  unit-tests:
    runs-on: ubuntu-latest
    needs: [editorconfig, markdown, lint, gitleaks]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Run the unit tests
        run: python -m unittest discover -s ./app/ -p '*_test.py'

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [editorconfig, markdown, lint, gitleaks]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk:
    runs-on: ubuntu-latest
    needs: [editorconfig, markdown, lint, gitleaks]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-tests, sonarcloud, snyk]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: ${{ secrets.DOCKERHUB_USER }}/flaskapp:${{ github.sha }}
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/myimage.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myimage
          path: /tmp/myimage.tar

  trivy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: /tmp
      
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ secrets.DOCKERHUB_USER }}/flaskapp:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          # prevents "Fatal error init error: DB error: failed to download vulnerability DB"
          cache: false 

  docker-push:
    runs-on: ubuntu-latest
    needs: trivy
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: /tmp
      
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USER }}/flaskapp:${{ github.sha }}