name: Pipeline
run-name: Action triggered by @${{ github.actor }}

on:
  push:
  pull_request:
    branches:
        - '**'
        - '!main'

jobs:
  editorconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Check if the .editorconfig file exists
        run: |
          [ -f .editorconfig ] && exit 0 || exit 1

      - name: Run the editorconfig checker
        run: editorconfig-checker -verbose -exclude node_modules

  markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repo
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install markdown checker
        run: npm i -g cli-markdown

      - name: Run markdown checker
        run: find . -name '*.md' ! -path '*/node_modules/*' -exec md {} \;


  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: pip install pylint black

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          pylint: true
          pylint_args: --disable=C0114,C0115,C0116,E0401
          black: true

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run the gitleaks
        uses: gitleaks/gitleaks-action@v2
  
  unit-tests:
    runs-on: ubuntu-latest
    needs: [editorconfig, markdown, lint, gitleaks]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Run the unit tests
        run: python -m unittest discover -s ./app/ -p '*_test.py'

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [editorconfig, markdown, lint, gitleaks]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk:
    runs-on: ubuntu-latest
    needs: [editorconfig, markdown, lint, gitleaks]
    steps:
      - name: Get the repo
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}